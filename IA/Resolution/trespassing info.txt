 <!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Ayeseri · Clasificar</title>
  <style>
    body{font-family:system-ui,Segoe UI,Roboto,Arial;margin:24px}
    .row{display:flex;gap:12px;align-items:center;margin-bottom:12px}
    #status{margin-top:8px}
    table{border-collapse:collapse;margin-top:12px;width:100%}
    th,td{border:1px solid #ddd;padding:8px}
    th{text-align:left;background:#f5f5f5}
    progress{width:220px;height:10px}
  </style>
</head>
<body>
  <h1>Clasificar errores</h1>
  <div class="row">
    <input id="file" type="file" accept=".csv" />
    <button id="send">Enviar</button>
    <progress id="pg" max="100" value="0" hidden></progress>
  </div>
  <div id="status"></div>
  <div id="preview"></div>

  <script type="module">
    // Si tu API vive en otro dominio, pon su URL aquí:
    const BASE_URL = ""; // "" usa mismo dominio; o por ejemplo "https://tu-api.com"

    const $file   = document.getElementById('file');
    const $send   = document.getElementById('send');
    const $status = document.getElementById('status');
    const $pg     = document.getElementById('pg');
    const $prev   = document.getElementById('preview');

    function msg(text, type='info'){
      const color = type==='error' ? '#b00020' : type==='ok' ? '#0a8f08' : '#333';
      $status.textContent = text;
      $status.style.color = color;
    }

    function renderPreview(data){
      // data esperado desde tu API:
      // { ok: true, sent: N, preview_sent: {texts:[...]}, preview_result: [...] }
      const rows = (data.preview_result || []).map(r => `
        <tr>
          <td>${r.ID_EE ?? ''}</td>
          <td>${escapeHtml(r.message ?? '')}</td>
          <td>${r.label ?? ''}</td>
          <td>${r.confidence ?? ''}</td>
          <td>${r.Load_Date ?? ''} ${r.Load_hour ?? ''}</td>
        </tr>
      `).join('') || `<tr><td colspan="5">Sin preview</td></tr>`;

      $prev.innerHTML = `
        <p><strong>Textos enviados:</strong> ${data.sent ?? '-'}</p>
        <table>
          <thead>
            <tr><th>ID_EE</th><th>Mensaje</th><th>Infotipo</th><th>Conf.</th><th>Fecha/Hora</th></tr>
          </thead>
          <tbody>${rows}</tbody>
        </table>
      `;
    }

    function escapeHtml(s){
      return String(s).replace(/[&<>"']/g, m => ({
        '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'
      }[m]));
    }

    async function uploadCsv(file){
      // Validaciones básicas
      if (!file) throw new Error('Selecciona un archivo .csv');
      if (!file.name.toLowerCase().endsWith('.csv')) throw new Error('El archivo debe ser .csv');
      if (file.size > 20 * 1024 * 1024) throw new Error('El CSV no puede exceder 20 MB');

      const fd = new FormData();
      fd.append('file', file);

      // Mostrar “progreso” aproximado (no hay progreso real con fetch sin streams)
      $pg.hidden = false; $pg.value = 25; msg('Subiendo archivo…');

      const res = await fetch((BASE_URL || '') + '/ClasifyMethod', {
        method: 'POST',
        body: fd,
      });

      $pg.value = 75; msg('Procesando…');

      const data = await res.json().catch(() => ({}));
      if (!res.ok) {
        throw new Error(data?.error || `HTTP ${res.status}`);
      }

      $pg.value = 100; setTimeout(()=>{$pg.hidden = true; $pg.value = 0;}, 300);
      return data;
    }

    $send.addEventListener('click', async () => {
      try {
        $prev.innerHTML = '';
        const file = $file.files[0];
        const data = await uploadCsv(file);
        msg('Listo 🎉', 'ok');
        renderPreview(data);
        console.log('Respuesta API:', data);
      } catch (e) {
        console.error(e);
        msg(e.message || 'Error al enviar', 'error');
        $pg.hidden = true; $pg.value = 0;
      }
    });
  </script>
</body>
</html>